#!/bin/bash -x
# Collection of NGSeasy Functions
# Stephen Newhouse <stephen.j.newhouse@gmail.com>
# Version 0.9.0

##--------------------------------------------------##
## NGS MarkDuplicates
##--------------------------------------------------##

#usage printing func
usage()
{
cat << EOF
  This script sets up the NGSeasy docker GATK container and runs BaseRecalibrator then PrintReads BQSR recalibration on *.realn.bam files
  See NGSEasy containerized instructions.

  ARGUMENTS:
  -h      Flag: Show this help message
  -c      NGSeasy project and run configureation file
  -d      NGSeasy project directory

  EXAMPLE USAGE:
    
    ngseasy_base_recal -c config.file.tsv -d project_directory

EOF
}

#get options for command line args
  while  getopts "hc:d:" opt
  do

      case ${opt} in
	  h)
	  usage #print help
	  exit 0
	  ;;
	  
	  c)
	  config_tsv=${OPTARG}
	  ;;

	  d)
	  project_directory=${OPTARG}
	  ;; 
      esac
  done

#check config file exists.
if [ ! -e "${config_tsv}" ] 
then
	    echo "ERROR :  ${config_tsv} does not exist....exiting "
	    usage;
	    exit 1;
fi

#check exists.
if [ ! -d "${project_directory}" ]
  then
    echo "ERROR : project_directory ${project_directory} does not exist "
    usage;
    exit 1;
fi

#---------------------------------------------------------------------------------#
#Read config file 
while read -r f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15
do
# set varibales  
  DATE=`date +"%d%m%y"`
  POJECT_ID=$f1
  SAMPLE_ID=$f2
  FASTQ1=$f3
  FASTQ2=$f4
  PROJECT_DIR=$f5 
  DNA_PREP_LIBRARY_ID=$f6
  NGS_PLATFORM=$f7
  NGS_TYPE=$f8
  BED_ANNO=$f9
  PIPELINE=$f10
  ALIGNER=$f11
  VARCALLER=$f12
  GTMODEGATK=$f13
  CLEANUP=$f14
  NCPU=$f15


#Logfile 
LOGFILE=${PROJECT_DIR}/${POJECT_ID}/run_logs/${SAMPLE_ID}.${DATE}

#OUTPUT SAMPLE DIR 
SOUT=${PROJECT_DIR}/${POJECT_ID}/${SAMPLE_ID}

#------------------------Container I/O--------------------------------#
#run compbio/ngseasy-fastq
#Docker Output Dir: this is the mouned directory set by ngseasy_volumes_container
DOCKERHOME="/home/pipeman/ngs_projects"

#Docker OUTPUT SAMPLE DIR 
SOUTDocker=${DOCKERHOME}/${POJECT_ID}/${SAMPLE_ID}

#bamprefix
BAM_PREFIX=${SAMPLE_ID}.${NGS_TYPE}.${NGS_PLATFORM}.${ALIGNER}

#known indels and SNPs
KNOWN_INDELS=/home/pipeman/gatk_resources/Mills_and_1000G_gold_standard.indels.b37.vcf
KNOWN_SNPS_1000G=/home/pipeman/gatk_resources/1000G_phase1.snps.high_confidence.b37.vcf
KNOWN_SNPS_OMNI=/home/pipeman/gatk_resources/1000G_omni2.5.b37.vcf
KNOWN_SNPS_b138=/home/pipeman/gatk_resources/dbsnp_138.b37.vcf

#-----------------------------------------------------------------------------#


# Freebayes #

if [ "${VARCALLER}" == "freebayes" ]
then
  
logger_ngseasy " START Variant Calling using Freebayes " ${LOGFILE}

  sudo docker run \
  -P \
  --name Freebayes_${SAMPLE_ID} \
  --volumes-from volumes_container \
  -t compbio/ngseasy-freebayes:v0.9 \
  /usr/local/pipeline/freebayes/bin/freebayes \
    -f ${REFGenomes}/human_g1k_v37.fasta \
    -b ${SOUTDocker}/alignments/${BAM_PREFIX}.bam \
    --min-coverage 10 \
    --min-mapping-quality 20 \
    --min-base-quality 20 \
    --genotype-qualities > ${SOUTDocker}/vcf/${BAM_PREFIX}.raw.snps.indels.${VARCALLER}.vcf;

#logs
  sudo docker logs Freebayes_${SAMPLE_ID} >> ${LOGFILE}.log#

  sudo docker rm Freebayes_${SAMPLE_ID}

  # copy vcf to cohort vcf directory
  cp ${SOUT}/vcf/${BAM_PREFIX}.raw.snps.indels.${VARCALLER}.vcf ${PROJECT_DIR}/${POJECT_ID}/cohort_vcfs/;

  logger_ngseasy " copying [${SOUT}/vcf/${BAM_PREFIX}.raw.snps.indels.${VARCALLER}.vcf] to [${PROJECT_DIR}/${POJECT_ID}/cohort_vcfs/] "  ${LOGFILE}

  logger_ngseasy " END Variant Calling using Freebayes "  ${LOGFILE}

fi

#-----------------------------------------------------------------------------#

# Platypus #

#-----------------------------------------------------------------------------#

if [ "${VARCALLER}" == "platypus" ]
then

  echo " NGSeasy: Starting Variant Calling using Platypus " `date`
  
    if [ "${NGS_TYPE}" == "TGS" ] || [ "${NGS_TYPE}" == "WEX" ]
    then
  
    echo " NGSeasy: NGS_TYPE is Targeted so no duplicate filtering  " `date`
    # for exome/whole genome data no duplicate filtering
  sudo docker run \
  -P \
  --name platypus_${SAMPLE_ID} \
  --volumes-from volumes_container \
  -t compbio/ngseasy-platypus:v0.9 \
      python /usr/local/pipeline/Platypus_0.7.9.1/Platypus.py callVariants \
      --nCPU ${NCPU} \
      --bamFiles=${SOUT}/alignments/${BAM_PREFIX}.bam \
      --refFile=${REFGenomes}/human_g1k_v37.fasta \
      --output=${SOUT}/vcf/${BAM_PREFIX}.raw.snps.indels.${VARCALLER}.vcf \
      --filterDuplicates=0 \
      --minReads=10 \
      --minMapQual=20 \
      --minBaseQual=20;
      
  # copy vcf to cohort vcf directory
  cp -v ${SOUT}/vcf/${BAM_PREFIX}.raw.snps.indels.${VARCALLER}.vcf ${PROJECT_DIR}/${POJECT_ID}/cohort_vcfs/;
      
     else
  python /usr/local/pipeline/Platypus_0.7.9.1/Platypus.py callVariants \
    --nCPU ${NCPU} \
    --bamFiles=${SOUT}/alignments/${BAM_PREFIX}.bam \
    --refFile=${REFGenomes}/human_g1k_v37.fasta \
    --output=${SOUT}/vcf/${BAM_PREFIX}.raw.snps.indels.${VARCALLER}.vcf \
    --filterDuplicates=1 \
    --minReads=10 \
    --minMapQual=30 \
    --minBaseQual=20;
    
      # copy vcf to cohort vcf directory
  cp -v ${SOUT}/vcf/${BAM_PREFIX}.raw.snps.indels.${VARCALLER}.vcf ${PROJECT_DIR}/${POJECT_ID}/cohort_vcfs/;
  
    fi


#-----------------------------------------------------------------------------#

# UnifeidGenotyper #

#-----------------------------------------------------------------------------#

#-----------------------------------------------------------------------------#

# HaplotypeCaller #

#-----------------------------------------------------------------------------#


#-----------------------------------------------------------------------------#

# Ensembl: Freebayes + Platypus + UnifeidGenotyper + HaplotypeCaller #

#-----------------------------------------------------------------------------#




#------permissions------------#
chmod -R 777 ${SOUT}/*

done < ${config_tsv}